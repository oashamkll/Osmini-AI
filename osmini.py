import requests
import json
import time
import sys
import platform
import psutil
import os
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt, Confirm  # –î–æ–±–∞–≤–∏–ª–∏ Prompt –∏ Confirm

# API-–∫–ª—é—á (–•—Ä–∞–Ω–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ!)
API_KEY = "AIzaSyCbFlT9BmmhCx7oSLwM7KG15Cx8oc_lHbY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á!
API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"
GITHUB_REPO = "oashamkll/Osmini-AI"  # –í–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
GITHUB_BRANCH = "main"  # –í–µ—Ç–∫–∞

console = Console()

BANNER = """
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù
   [bold cyan]AI Chat powered by Osmini-2.0[/bold cyan]
"""

def get_system_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    system = platform.system()
    version = platform.version()
    processor = platform.processor()
    ram = round(psutil.virtual_memory().total / (1024 ** 3), 2)  # –ì–ë
    return f"[bold yellow]–û–°:[/bold yellow] {system} {version}\n" \
           f"[bold yellow]–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:[/bold yellow] {processor}\n" \
           f"[bold yellow]–û–ó–£:[/bold yellow] {ram} –ì–ë"

def print_main_menu():
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    os.system('cls' if os.name == 'nt' else 'clear')  # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞

    system_info = get_system_info()
    dev_info = "[bold magenta]–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:[/bold magenta] @Pasha_Olex"
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    console.print(Panel(Text(BANNER, justify="center", style="bold blue")))
    console.print(Panel(Text(f"{system_info}\n[bold yellow]–í—Ä–µ–º—è:[/bold yellow] {now}",
                             justify="left", style="bold green"), title="üîπ –°–∏—Å—Ç–µ–º–∞"))
    console.print(Panel(Text(dev_info, justify="center", style="bold magenta"), title="üë®‚Äçüíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    console.print("[bold cyan]1. –ù–∞—á–∞—Ç—å —á–∞—Ç[/bold cyan]")
    console.print("[bold cyan]2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è[/bold cyan]")
    console.print("[bold cyan]3. –í—ã—Ö–æ–¥[/bold cyan]")


def loading_animation(message="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...", duration=1.5):
    """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏."""
    with Progress(SpinnerColumn(), TextColumn(f"[cyan]{message}")) as progress:
        task = progress.add_task("loading", total=None)
        time.sleep(duration)
        progress.remove_task(task)

def typewriter_effect(text):
    """–≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–Ω–æ–π –º–∞—à–∏–Ω–∫–∏."""
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(0.02)
    print()

def send_request(prompt, history):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Gemini —Å –∏—Å—Ç–æ—Ä–∏–µ–π."""
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": history + [{"role": "user", "parts": [{"text": prompt}]}],
    }

    try:
        response = requests.post(API_URL, headers=headers, json=data, timeout=20)
        response.raise_for_status()
        result = response.json()

        if 'candidates' in result and result['candidates'] and 'content' in result['candidates'][0] and 'parts' in result['candidates'][0]['content'] and result['candidates'][0]['content']['parts']:
            text = result["candidates"][0]["content"]["parts"][0]["text"]
            return text, "assistant"
        else:
            return "–û—à–∏–±–∫–∞: –ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.", "error"

    except requests.exceptions.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", "error"
    except (KeyError, IndexError, json.JSONDecodeError) as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {e}", "error"


def check_for_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ GitHub."""
    try:
        api_url = f"https://api.github.com/repos/{GITHUB_REPO}/commits/{GITHUB_BRANCH}"
        response = requests.get(api_url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()
        last_commit_time = datetime.strptime(data['commit']['author']['date'], "%Y-%m-%dT%H:%M:%SZ")
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            with open("last_commit_time.txt", "r") as f:
                last_local_commit_time_str = f.read()
                last_local_commit_time = datetime.strptime(last_local_commit_time_str, "%Y-%m-%dT%H:%M:%S")
        except FileNotFoundError:
            last_local_commit_time = datetime.min  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ –±—ã–ª–æ

        if last_commit_time > last_local_commit_time:
            console.print("[bold green]–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ![/bold green]")
            if Confirm.ask("[bold cyan]–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å Osmini-AI?[/bold cyan]"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
                with open("last_commit_time.txt", "w") as f:
                    f.write(last_commit_time.strftime("%Y-%m-%dT%H:%M:%S"))
                update_script = f"cd; rm -rf osmini.py; git clone https://github.com/{GITHUB_REPO}.git; cd Osmini-AI; python osmini.py"
                os.system(update_script)
                sys.exit(0) # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            else:
                console.print("[bold yellow]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/bold yellow]")

        else:
            console.print("[bold green]–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è.[/bold green]")


    except requests.exceptions.RequestException as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}[/bold red]")
    except (KeyError, ValueError) as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}[/bold red]")
    except Exception as e:
        console.print(f"[bold red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")



def chat_mode():
      """–†–µ–∂–∏–º —á–∞—Ç–∞."""
      history = []
      console.print("[bold cyan]–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-—á–∞—Ç! –ù–∞–ø–∏—à–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.[/bold cyan]")

      while True:
        user_input = console.input("\n[bold green]–í—ã:[/bold green] ")
        if user_input.lower() in ["exit", "–≤—ã—Ö–æ–¥"]:
            console.print("[bold red]–í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/bold red]")
            break

        loading_animation()
        response, role = send_request(user_input, history)

        if role == "error":
          console.print(f"[bold red]–û—à–∏–±–∫–∞: {response}[/bold red]")
          continue

        history.append({"role": "user", "parts": [{"text": user_input}]})
        history.append({"role": "assistant", "parts": [{"text": response}]})

        if len(history) > 10:
          history = history[-10:]

        console.print("[bold yellow]AI:[/bold yellow] ", end="")
        typewriter_effect(response)



def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    while True:
        print_main_menu()
        choice = Prompt.ask("[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ[/bold cyan]", choices=["1", "2", "3"])

        if choice == "1":
            chat_mode()
        elif choice == "2":
            check_for_updates()
        elif choice == "3":
            console.print("[bold red]–í—ã—Ö–æ–¥.[/bold red]")
            break
        # –ù–µ—Ç else, —Ç–∞–∫ –∫–∞–∫ Prompt.ask —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤


if __name__ == "__main__":
    main()
